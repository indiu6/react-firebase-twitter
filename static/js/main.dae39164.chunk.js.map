{"version":3,"sources":["myFirebase.js","routes/Profile.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","components/Router.js","components/App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","Profile","userObj","refreshUser","history","useHistory","useState","displayName","newDisplayName","setNewDisplayName","onSubmit","event","a","preventDefault","updateProfile","className","onChange","value","target","type","autoFocus","placeholder","style","marginTop","onClick","signOut","push","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","required","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","src","alt","class","faTrash","faPencilAlt","TweetFactory","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","aFile","files","reader","FileReader","readAsDataURL","onloadend","finishedEvent","result","currentTarget","opacity","backgroundImage","document","getElementById","faTimes","Home","tweets","setTweets","useEffect","orderBy","onSnapshot","snapshot","tweetArray","docs","map","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dae39164.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","import { authService } from 'myFirebase';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push('/');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n        //todo add photo url\r\n        // photoUrl: userObj.photoUrl,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display Name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        {/* {userObj.Profile.photoUrl} */}\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n\r\n// const getMyTweets = async () => {\r\n//   const tweets = await dbService\r\n//     .collection('tweets')\r\n//     .where('creatorId', '==', userObj.uid)\r\n//     .orderBy('createdAt', 'desc')\r\n//     .get();\r\n//   console.log(tweets.docs.map((doc) => doc.data()));\r\n// };\r\n\r\n// useEffect(() => {\r\n//   getMyTweets();\r\n// }, []);\r\n","import { authService } from 'myFirebase';\r\nimport React, { useState } from 'react';\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === 'email') setEmail(value);\r\n    else if (name === 'password') setPassword(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password,\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => {\r\n    setNewAccount((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"authInput authSubmit\"\r\n          value={newAccount ? 'Create Account' : 'Log In'}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? 'Sign In' : 'Create Account'}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from 'components/AuthForm';\r\nimport { authService, firebaseInstance } from 'myFirebase';\r\nimport React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event; //todo remember this\r\n    let provider;\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={'#04AAFF'}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { dbService, storageService } from 'myFirebase';\r\nimport React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm('Are you sure to delete this tweet?');\r\n    if (ok) {\r\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n      await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => {\r\n    setEditing((prev) => !prev);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n      text: newTweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewTweet(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"nweet\">\r\n      {editing ? (\r\n        <>\r\n          {isOwner && (\r\n            <>\r\n              <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Edit your Tweet\"\r\n                  value={newTweet}\r\n                  required\r\n                  autoFocus\r\n                  onChange={onChange}\r\n                  className=\"formInput\"\r\n                />\r\n                <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\" />\r\n              </form>\r\n              <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                Cancel\r\n              </span>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{tweetObj.text}</h4>\r\n          {tweetObj.attachmentUrl && (\r\n            <img src={tweetObj.attachmentUrl} alt=\"attached pic\" />\r\n          )}\r\n          {isOwner && (\r\n            <div class=\"nweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import { dbService, storageService } from 'myFirebase';\r\nimport React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n  const [tweet, setTweet] = useState('');\r\n  const [attachment, setAttachment] = useState('');\r\n\r\n  const onSubmit = async (event) => {\r\n    if (tweet === '') {\r\n      return;\r\n    }\r\n\r\n    event.preventDefault();\r\n    let attachmentUrl = '';\r\n    if (attachment !== '') {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, 'data_url');\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    const tweetObj = {\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n\r\n    await dbService.collection('tweets').add(tweetObj);\r\n    setTweet('');\r\n    setAttachment('');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const aFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(aFile);\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment('');\r\n    let fileElement = document.getElementById('fileId');\r\n    fileElement.value = null;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmit} className=\"factoryForm\">\r\n        <div className=\"factoryInput__container\">\r\n          <input\r\n            className=\"factoryInput__input\"\r\n            value={tweet}\r\n            onChange={onChange}\r\n            type=\"text\"\r\n            placeholder=\"What's on your mind?\"\r\n            maxLength={120}\r\n          />\r\n          <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n        </div>\r\n\r\n        <label for=\"attach-file\" className=\"factoryInput__label\">\r\n          <span>Add photos</span>\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </label>\r\n\r\n        <input\r\n          type=\"file\"\r\n          accept=\"image/*\"\r\n          id=\"attach-file\"\r\n          onChange={onFileChange}\r\n          style={{\r\n            opacity: 0,\r\n          }}\r\n        />\r\n        {attachment && (\r\n          <div className=\"factoryForm__attachment\">\r\n            <img\r\n              src={attachment}\r\n              alt=\"attached pic\"\r\n              style={{\r\n                backgroundImage: attachment,\r\n              }}\r\n            />\r\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n              <span>Remove</span>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TweetFactory;\r\n","import Tweet from 'components/Tweet';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { dbService } from '../myFirebase';\r\n\r\nimport TweetFactory from 'components/TweetFactory';\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [tweets, setTweets] = useState([]);\r\n\r\n  useEffect(() => {\r\n    dbService\r\n      .collection('tweets')\r\n      .orderBy('createdAt', 'desc')\r\n      .onSnapshot((snapshot) => {\r\n        const tweetArray = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setTweets(tweetArray);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n// const getTweets = async () => {\r\n//   const dbTweets = await dbService.collection('tweets').get();\r\n//   dbTweets.forEach((document) => {\r\n//     const tweetObj = {\r\n//       ...document.data(),\r\n//       id: document.id,\r\n//     };\r\n//     setTweets((prev) => [tweetObj, ...prev]); //todo REMEMBER THIS!\r\n//   });\r\n// };\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  return (\r\n    <nav>\r\n      <ul style={{ display: 'flex', justifyContent: 'center', marginTop: 50 }}>\r\n        <li>\r\n          <Link to=\"/\" style={{ marginRight: 10 }}>\r\n            <FontAwesomeIcon icon={faTwitter} color={'#04AAFF'} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link\r\n            to=\"/profile\"\r\n            style={{\r\n              marginLeft: 10,\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              alignItems: 'center',\r\n              fontSize: 12,\r\n            }}\r\n          >\r\n            <FontAwesomeIcon icon={faUser} color={'#04AAFF'} size=\"2x\" />\r\n            <span style={{ marginTop: 10 }}>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}'s Profile`\r\n                : 'Profile'}\r\n            </span>\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Profile from 'routes/Profile';\r\nimport Auth from '../routes/Auth';\r\nimport Home from '../routes/Home';\r\nimport Navigation from './Navigation';\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <div\r\n            style={{\r\n              maxWidth: 890,\r\n              width: '100%',\r\n              margin: '0 auto',\r\n              marginTop: 80,\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n            {/* <Redirect from=\"*\" to=\"/\" /> */}\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n            {/* <Redirect from=\"*\" to=\"/\" /> */}\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useState, useEffect } from 'react';\nimport AppRouter from 'components/Router';\nimport { authService } from 'myFirebase';\n\nconst App = () => {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(false);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        //* option 1\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args), //todo REMEMBER this!\n        });\n\n        //* option 2\n        // setUserObj(user);\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    //* option 1\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n\n    //* option 2 error\n    // setUserObj(Object.assign({}, user));\n  };\n\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        'Initializing...'\n      )}\n      {/* <footer>&copy; {new Date().getFullYear()} Sean</footer> */}\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}